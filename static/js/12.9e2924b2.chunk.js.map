{"version":3,"sources":["../node_modules/react-sticky-box/dist/es/index.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"names":["stickyProp","CSS","supports","passiveArg","opts","Object","defineProperty","get","passive","window","addEventListener","removeEventListener","e","StickyBox","_React$Component","props","_this","call","this","addListener","element","event","handler","unsubscribes","push","addResizeObserver","node","ro","ResizeObserver","observe","disconnect","registerContainerRef","n","scrollPane","parent","parentElement","overflowYVal","getComputedStyle","getPropertyValue","document","body","getScrollParent","latestScrollY","scrollY","scrollTop","handleScroll","handleWindowResize","handleScrollPaneResize","parentNode","handleParentNodeResize","handleNodeResize","initial","forEach","fn","getCurrentOffset","mode","offset","_this$props","offsetTop","offsetBottom","Math","max","scrollPaneOffset","naturalTop","viewPortHeight","nodeHeight","innerHeight","offsetHeight","firstChild","offsetParent","getBoundingClientRect","top","computedParentStyle","parentPaddingTop","parseInt","parentPaddingBottom","target","current","offsetTill","oldParentHeight","parentHeight","height","bottom","changeMode","changeToStickyBottomIfBoxTooLow","Number","POSITIVE_INFINITY","_temp","prevHeight","_this$props2","undefined","diff","lowestPossible","nextOffset","min","_this$props3","scrollDelta","_inheritsLoose","_proto","prototype","newMode","_this$props4","onChangeMode","style","position","nextBottom","render","_this$props5","children","className","React","createElement","ref","Component","defaultProps","module","exports","subClass","superClass","create","constructor","__proto__","MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","__entries__","length","enumerable","configurable","set","value","delete","entries","splice","has","clear","callback","ctx","_i","_a","isBrowser","global$1","global","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","attributes","childList","characterData","subtree","_b","propertyName","getInstance","instance_","defineConfigurable","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","getHTMLElementContentRect","clientWidth","clientHeight","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","width","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","contentRect","Constr","DOMRectReadOnly","createReadOnlyRect","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","observation","map","WeakMap","method","apply"],"mappings":"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","file":"static/js/12.9e2924b2.chunk.js","sourcesContent":["import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nvar getScrollParent = function (node) {\n  var parent = node;\n\n  while (parent = parent.parentElement) {\n    var overflowYVal = getComputedStyle(parent, null).getPropertyValue(\"overflow-y\");\n    if (parent === document.body) return window;\n    if (overflowYVal === \"auto\" || overflowYVal === \"scroll\") return parent;\n  }\n\n  return window;\n};\n\nvar offsetTill = function (node, target) {\n  var current = node;\n  var offset = 0; // If target is not an offsetParent itself, subtract its offsetTop and set correct target\n\n  if (target.firstChild && target.firstChild.offsetParent !== target) {\n    offset += node.offsetTop - target.offsetTop;\n    target = node.offsetParent;\n    offset += -node.offsetTop;\n  }\n\n  do {\n    offset += current.offsetTop;\n    current = current.offsetParent;\n  } while (current && current !== target);\n\n  return offset;\n};\n\nvar stickyProp = null;\n\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n  if (CSS.supports(\"position\", \"sticky\")) stickyProp = \"sticky\";else if (CSS.supports(\"position\", \"-webkit-sticky\")) stickyProp = \"-webkit-sticky\";\n} // Inspired by https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n\n\nvar passiveArg = false;\n\ntry {\n  var opts = Object.defineProperty({}, \"passive\", {\n    // eslint-disable-next-line getter-return\n    get: function get() {\n      passiveArg = {\n        passive: true\n      };\n    }\n  });\n  window.addEventListener(\"testPassive\", null, opts);\n  window.removeEventListener(\"testPassive\", null, opts);\n} catch (e) {}\n\nvar StickyBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(StickyBox, _React$Component);\n\n  function StickyBox(props) {\n    var _this = _React$Component.call(this, props) || this;\n\n    _this.addListener = function (element, event, handler, passive) {\n      element.addEventListener(event, handler, passive);\n\n      _this.unsubscribes.push(function () {\n        return element.removeEventListener(event, handler);\n      });\n    };\n\n    _this.addResizeObserver = function (node, handler) {\n      var ro = new ResizeObserver(handler);\n      ro.observe(node);\n\n      _this.unsubscribes.push(function () {\n        return ro.disconnect();\n      });\n    };\n\n    _this.registerContainerRef = function (n) {\n      if (!stickyProp) return;\n      _this.node = n;\n\n      if (n) {\n        _this.scrollPane = getScrollParent(_this.node);\n        _this.latestScrollY = _this.scrollPane === window ? window.scrollY : _this.scrollPane.scrollTop;\n\n        _this.addListener(_this.scrollPane, \"scroll\", _this.handleScroll, passiveArg);\n\n        _this.addListener(_this.scrollPane, \"mousewheel\", _this.handleScroll, passiveArg);\n\n        if (_this.scrollPane === window) {\n          _this.addListener(window, \"resize\", _this.handleWindowResize);\n\n          _this.handleWindowResize();\n        } else {\n          _this.addResizeObserver(_this.scrollPane, _this.handleScrollPaneResize);\n\n          _this.handleScrollPaneResize();\n        }\n\n        _this.addResizeObserver(_this.node.parentNode, _this.handleParentNodeResize);\n\n        _this.handleParentNodeResize();\n\n        _this.addResizeObserver(_this.node, _this.handleNodeResize);\n\n        _this.handleNodeResize({\n          initial: true\n        });\n\n        _this.initial();\n      } else {\n        _this.unsubscribes.forEach(function (fn) {\n          return fn();\n        });\n\n        _this.unsubscribes = [];\n        _this.scrollPane = null;\n      }\n    };\n\n    _this.getCurrentOffset = function () {\n      if (_this.mode === \"relative\") return _this.offset;\n      var _this$props = _this.props,\n          offsetTop = _this$props.offsetTop,\n          offsetBottom = _this$props.offsetBottom;\n\n      if (_this.mode === \"stickyTop\") {\n        return Math.max(0, _this.scrollPaneOffset + _this.latestScrollY - _this.naturalTop + offsetTop);\n      }\n\n      if (_this.mode === \"stickyBottom\") {\n        return Math.max(0, _this.scrollPaneOffset + _this.latestScrollY + _this.viewPortHeight - (_this.naturalTop + _this.nodeHeight + offsetBottom));\n      }\n    };\n\n    _this.handleWindowResize = function () {\n      _this.viewPortHeight = window.innerHeight;\n      _this.scrollPaneOffset = 0;\n\n      _this.handleScroll();\n    };\n\n    _this.handleScrollPaneResize = function () {\n      _this.viewPortHeight = _this.scrollPane.offsetHeight;\n\n      if (process.env.NODE_ENV !== \"production\" && _this.viewPortHeight === 0) {\n        console.warn(\"react-sticky-box's scroll pane has a height of 0. This seems odd. Please check this node:\", _this.scrollPane);\n      } // Only applicable if scrollPane is an offsetParent\n\n\n      if (_this.scrollPane.firstChild.offsetParent === _this.scrollPane) {\n        _this.scrollPaneOffset = _this.scrollPane.getBoundingClientRect().top;\n      } else {\n        _this.scrollPaneOffset = 0;\n      }\n\n      _this.handleScroll();\n    };\n\n    _this.handleParentNodeResize = function () {\n      var parentNode = _this.node.parentNode;\n      var computedParentStyle = getComputedStyle(parentNode, null);\n      var parentPaddingTop = parseInt(computedParentStyle.getPropertyValue(\"padding-top\"), 10);\n      var parentPaddingBottom = parseInt(computedParentStyle.getPropertyValue(\"padding-bottom\"), 10);\n      _this.naturalTop = offsetTill(parentNode, _this.scrollPane) + parentPaddingTop + _this.scrollPaneOffset;\n      var oldParentHeight = _this.parentHeight;\n      _this.parentHeight = parentNode.getBoundingClientRect().height - (parentPaddingTop + parentPaddingBottom);\n\n      if (_this.mode === \"relative\") {\n        if (_this.props.bottom) {\n          _this.changeMode(\"relative\");\n        } else {\n          // If parent height decreased...\n          if (oldParentHeight > _this.parentHeight) {\n            _this.changeToStickyBottomIfBoxTooLow(_this.latestScrollY);\n          }\n        }\n      }\n\n      if (oldParentHeight !== _this.parentHeight && _this.mode === \"relative\") {\n        _this.latestScrollY = Number.POSITIVE_INFINITY;\n\n        _this.handleScroll();\n      }\n    };\n\n    _this.handleNodeResize = function (_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          initial = _ref.initial;\n\n      var prevHeight = _this.nodeHeight;\n      _this.nodeHeight = _this.node.getBoundingClientRect().height;\n\n      if (!initial && prevHeight !== _this.nodeHeight) {\n        var _this$props2 = _this.props,\n            offsetTop = _this$props2.offsetTop,\n            offsetBottom = _this$props2.offsetBottom,\n            bottom = _this$props2.bottom;\n\n        if (_this.nodeHeight + offsetTop + offsetBottom <= _this.viewPortHeight) {\n          // Just make it sticky if node smaller than viewport\n          _this.mode = undefined;\n\n          _this.initial();\n        } else {\n          var diff = prevHeight - _this.nodeHeight;\n          var lowestPossible = _this.parentHeight - _this.nodeHeight;\n          var nextOffset = Math.min(lowestPossible, _this.getCurrentOffset() + (bottom ? diff : 0));\n          _this.offset = Math.max(0, nextOffset);\n          if (!bottom || _this.mode !== \"stickyBottom\") _this.changeMode(\"relative\");\n        }\n      }\n    };\n\n    _this.handleScroll = function () {\n      var _this$props3 = _this.props,\n          offsetTop = _this$props3.offsetTop,\n          offsetBottom = _this$props3.offsetBottom;\n      var scrollY = _this.scrollPane === window ? window.scrollY : _this.scrollPane.scrollTop;\n      if (scrollY === _this.latestScrollY) return;\n\n      if (_this.nodeHeight + offsetTop + offsetBottom <= _this.viewPortHeight) {\n        // Just make it sticky if node smaller than viewport\n        _this.initial();\n\n        _this.latestScrollY = scrollY;\n        return;\n      }\n\n      var scrollDelta = scrollY - _this.latestScrollY;\n      _this.offset = _this.getCurrentOffset();\n\n      if (scrollDelta > 0) {\n        // scroll down\n        if (_this.mode === \"stickyTop\") {\n          if (scrollY + _this.scrollPaneOffset + offsetTop > _this.naturalTop) {\n            if (scrollY + _this.scrollPaneOffset + _this.viewPortHeight <= _this.naturalTop + _this.nodeHeight + _this.offset + offsetBottom) {\n              _this.changeMode(\"relative\");\n            } else {\n              _this.changeMode(\"stickyBottom\");\n            }\n          }\n        } else if (_this.mode === \"relative\") {\n          _this.changeToStickyBottomIfBoxTooLow(scrollY);\n        }\n      } else {\n        // scroll up\n        if (_this.mode === \"stickyBottom\") {\n          if (_this.scrollPaneOffset + scrollY + _this.viewPortHeight < _this.naturalTop + _this.parentHeight + offsetBottom) {\n            if (_this.scrollPaneOffset + scrollY + offsetTop >= _this.naturalTop + _this.offset) {\n              _this.changeMode(\"relative\");\n            } else {\n              _this.changeMode(\"stickyTop\");\n            }\n          }\n        } else if (_this.mode === \"relative\") {\n          if (_this.scrollPaneOffset + scrollY + offsetTop < _this.naturalTop + _this.offset) {\n            _this.changeMode(\"stickyTop\");\n          }\n        }\n      }\n\n      _this.latestScrollY = scrollY;\n    };\n\n    if (props.offset && process.env.NODE_ENV !== \"production\") {\n      console.warn(\"react-sticky-box's \\\"offset\\\" prop is deprecated. Please use \\\"offsetTop\\\" instead. It'll be removed in v0.8.\");\n    }\n\n    _this.unsubscribes = [];\n    return _this;\n  }\n\n  var _proto = StickyBox.prototype;\n\n  _proto.changeMode = function changeMode(newMode) {\n    var _this$props4 = this.props,\n        onChangeMode = _this$props4.onChangeMode,\n        offsetTop = _this$props4.offsetTop,\n        offsetBottom = _this$props4.offsetBottom,\n        bottom = _this$props4.bottom;\n    if (this.mode !== newMode) onChangeMode(this.mode, newMode);\n    this.mode = newMode;\n\n    if (newMode === \"relative\") {\n      this.node.style.position = \"relative\";\n\n      if (bottom) {\n        var nextBottom = Math.max(0, this.parentHeight - this.nodeHeight - this.offset);\n        this.node.style.bottom = nextBottom + \"px\";\n      } else {\n        this.node.style.top = this.offset + \"px\";\n      }\n    } else {\n      this.node.style.position = stickyProp;\n\n      if (newMode === \"stickyBottom\") {\n        if (bottom) {\n          this.node.style.bottom = offsetBottom + \"px\";\n        } else {\n          this.node.style.top = this.viewPortHeight - this.nodeHeight - offsetBottom + \"px\";\n        }\n      } else {\n        // stickyTop\n        if (bottom) {\n          this.node.style.bottom = this.viewPortHeight - this.nodeHeight - offsetBottom + \"px\";\n        } else {\n          this.node.style.top = offsetTop + \"px\";\n        }\n      }\n    }\n\n    this.offset = this.getCurrentOffset();\n  };\n\n  _proto.initial = function initial() {\n    var bottom = this.props.bottom;\n\n    if (bottom) {\n      if (this.mode !== \"stickyBottom\") this.changeMode(\"stickyBottom\");\n    } else {\n      if (this.mode !== \"stickyTop\") this.changeMode(\"stickyTop\");\n    }\n  };\n\n  _proto.changeToStickyBottomIfBoxTooLow = function changeToStickyBottomIfBoxTooLow(scrollY) {\n    var offsetBottom = this.props.offsetBottom;\n\n    if (scrollY + this.scrollPaneOffset + this.viewPortHeight >= this.naturalTop + this.nodeHeight + this.offset + offsetBottom) {\n      this.changeMode(\"stickyBottom\");\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        children = _this$props5.children,\n        className = _this$props5.className,\n        style = _this$props5.style;\n    return React.createElement(\"div\", {\n      className: className,\n      style: style,\n      ref: this.registerContainerRef\n    }, children);\n  };\n\n  return StickyBox;\n}(React.Component);\n\nexport { StickyBox as default };\nStickyBox.defaultProps = {\n  onChangeMode: function onChangeMode() {},\n  offsetTop: 0,\n  offsetBottom: 0\n};\nprocess.env.NODE_ENV !== \"production\" ? StickyBox.propTypes = {\n  onChangeMode: PropTypes.func,\n  offsetTop: PropTypes.number,\n  offsetBottom: PropTypes.number,\n  bottom: PropTypes.bool\n} : void 0;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nexport default index;\n"],"sourceRoot":""}